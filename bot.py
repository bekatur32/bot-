from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
import asyncio
from aiogram.types import FSInputFile
import django
from asgiref.sync import sync_to_async
import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()
from amin.models import Tovar


BOT_API_TOKEN = '7342677552:AAF1ZTotSTb4ObFMvZUKElreZoqpslifpi0'

bot = Bot(token=BOT_API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


@router.message(Command("start"))
async def send_welcome(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõí", callback_data="catalog")],
        [InlineKeyboardButton(text="–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ", callback_data="reviews")],
        [InlineKeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="materials")],
        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ üí¨", callback_data="contact")]
    ])
    await message.answer(
        "Yamagata Shop Bot ‚Äî –≤–∞—à –≥–∏–¥ –≤ –º–∏—Ä–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–∞—Ç–∞–Ω –∏ —Å–∞–º—É—Ä–∞–π—Å–∫–∏—Ö –¥–æ—Å–ø–µ—Ö–æ–≤! ‚öîÔ∏è\n\n"
        "–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç:\n\n"
        "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ üõí\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üì¶\n"
        "‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ üè£\n"
        "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨\n\n"
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —è–ø–æ–Ω—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞! ‚ú®",
        reply_markup=keyboard
    )
@router.callback_query(lambda c: c.data in ['contact'])
async def handle_callback_query(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data=='contact':
        await callback_query.message.answer('–°–≤—è–∑—å —Å –Ω–∞–º–∏:\n–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º:@Creator_Beyond_X \nWhatsApp: +996 (554) 633-637 \n–Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: https://t.me/YamagataCatalog \n–°–∞–π—Ç:https://yamagata.kz \n–¢–∏–∫-—Ç–æ–∫:https://www.tiktok.com/@yamagata.kg \n–Æ—Ç—É–± –∫–∞–Ω–∞–ª: https://www.youtube.com/@yamagatakg')


@router.callback_query(lambda callback: callback.data == "catalog")
async def handle_catalog(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="—ç–∫—Å–ª—é–∑–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã üõí", callback_data="exclusive_0")],
        [InlineKeyboardButton(text="–ë–æ–µ–≤—ã–µ –∫–∞—Ç–∞–Ω—ã üõí", callback_data="fight_katan_0")],
        [InlineKeyboardButton(text="–ù–µ –±–æ–µ–≤—ã–µ –∫–∞—Ç–∞–Ω—ã üì¶", callback_data="katan_replic_0")],
        [InlineKeyboardButton(text="–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –±–æ–µ–≤—ã–º –∏ –Ω–µ –±–æ–µ–≤—ã–º üè£", callback_data="sovet")],
    ])
    await callback_query.message.answer(
        "–ö–∞—Ç–∞–ª–æ–≥ Yamagata Shop \n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —è–ø–æ–Ω—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
        reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda callback: callback.data.startswith("fight_katan"))
async def handle_fight_katan(callback_query: CallbackQuery):
    try:
        products = await sync_to_async(list)(
            Tovar.objects.filter(category="fight_katan")
        )

        if not products:
            await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        data_parts = callback_query.data.split("_")
        current_index = int(data_parts[-1]) if len(data_parts) > 2 else 0

        if "next" in callback_query.data:
            current_index = (current_index + 1) % len(products)
        elif "back" in callback_query.data:
            current_index = (current_index - 1) % len(products)

        product = products[current_index]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"fight_katan_back_{current_index}"),
                InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{product.id}"),
                InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data=f"fight_katan_next_{current_index}"),
            ]
        ])

        from django.conf import settings
        if product.image and product.image.name:
            image_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

            if os.path.exists(image_path):
                await callback_query.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=FSInputFile(image_path),
                        caption=f"{product.name}\n{product.description}\n\n–°–ù–ì —Å—Ç—Ä–∞–Ω—ã - {product.price_sng}‚Ç¨üí∂\nü•∑ EUROPE and AMERICA - {product.price_EUROPE_AMERICA}‚Ç¨üí∂ \n‚öîÔ∏è Africa, Australia - {product.price_Africa_Australia}‚Ç¨üí∂"
                    ),
                    reply_markup=keyboard
                )
            else:
                await callback_query.message.edit_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            await callback_query.message.edit_text("–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard)

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.callback_query(lambda callback: callback.data.startswith("katan_replic"))
async def handle_katan_replic(callback_query: CallbackQuery):
    try:
        products = await sync_to_async(list)(
            Tovar.objects.filter(category="katan_replic")
        )

        if not products:
            await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        data_parts = callback_query.data.split("_")
        current_index = int(data_parts[-1]) if len(data_parts) > 2 else 0

        if "next" in callback_query.data:
            current_index = (current_index + 1) % len(products)
        elif "back" in callback_query.data:
            current_index = (current_index - 1) % len(products)

        product = products[current_index]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"katan_replic_back_{current_index}"),
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{product.id}"),
            InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data=f"katan_replic_next_{current_index}"),
        ]])

        from django.conf import settings
        if product.image and product.image.name:
            image_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

            if os.path.exists(image_path):
                try:
                    await callback_query.message.edit_media(
                        media=types.InputMediaPhoto(
                            media=FSInputFile(image_path),
                            caption=f"{product.name}\n{product.description}\n\n–°–ù–ì —Å—Ç—Ä–∞–Ω—ã - {product.price_sng}‚Ç¨üí∂\nü•∑ EUROPE and AMERICA - {product.price_EUROPE_AMERICA}‚Ç¨üí∂ \n‚öîÔ∏è Africa, Australia - {product.price_Africa_Australia}‚Ç¨üí∂"
                        ),
                        reply_markup=keyboard
                    )
                except Exception as e:
                    await callback_query.message.answer_photo(
                        photo=FSInputFile(image_path),
                        caption=f"{product.name}\n{product.description}\n–¶–µ–Ω–∞: {product.price} ‚ÇΩ",
                        reply_markup=keyboard
                    )
            else:
                await callback_query.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            await callback_query.message.answer("–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard)

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É—Å—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ —Å—é–¥–∞ @bekatur32")



@router.callback_query(lambda callback: callback.data.startswith("exclusive"))
async def handle_fight_katan(callback_query: CallbackQuery):
    try:
        products = await sync_to_async(list)(
            Tovar.objects.filter(category="exclusive")
        )

        if not products:
            await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        data_parts = callback_query.data.split("_")
        current_index = int(data_parts[-1]) if len(data_parts) > 2 else 0

        if "next" in callback_query.data:
            current_index = (current_index + 1) % len(products)
        elif "back" in callback_query.data:
            current_index = (current_index - 1) % len(products)

        product = products[current_index]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"exclusive_back_{current_index}"),
                InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data=f"buy_{product.id}"),
                InlineKeyboardButton(text="–î–∞–ª—å—à–µ", callback_data=f"exclusive_next_{current_index}"),
            ]
        ])

        from django.conf import settings
        if product.image and product.image.name:
            image_path = os.path.join(settings.MEDIA_ROOT, product.image.name)

            if os.path.exists(image_path):
                await callback_query.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=FSInputFile(image_path),
                        caption=f"{product.name}\n{product.description}\n\nüó°–°–ù–ì —Å—Ç—Ä–∞–Ω—ã - {product.price_sng}‚Ç¨üí∂\nü•∑ EUROPE and AMERICA - {product.price_EUROPE_AMERICA}‚Ç¨üí∂ \n‚öîÔ∏è Africa, Australia - {product.price_Africa_Australia}‚Ç¨üí∂"
                    ),
                    reply_markup=keyboard
                )
            else:
                await callback_query.message.edit_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        else:
            await callback_query.message.edit_text("–£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=keyboard)

    except Exception as e:
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É—Å—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ —Å—é–¥–∞ @bekatur32")


@router.callback_query(lambda callback: callback.data.startswith("materials"))
async def handle_reviews(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõ† –ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="tov"),
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="oplata")
        ],
        [
            InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="dhl")
        ],
        [
            InlineKeyboardButton(text="üé® –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="imp"),
        ],

        [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact")]
    ])
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
        reply_markup=keyboard
    )

#from aiogram.types import LabeledPrice


# –æ–ø–ª–∞—Ç–∞ –Ω–∞–¥–æ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å
# @router.callback_query(lambda callback: callback.data.startswith("buy_"))
# async def handle_buy(callback_query: CallbackQuery):
#     product_id = int(callback_query.data.split("_")[1])
#     product = await sync_to_async(Tovar.objects.get)(id=product_id)
#
#     prices = [LabeledPrice(label=product.name, amount=int(product.price * 100))]
#
#     await callback_query.bot.send_invoice(
#         chat_id=callback_query.from_user.id,
#         title=product.name,
#         description=product.description,
#         payload=f"product_{product.id}",
#         provider_token="YOUR_PROVIDER_TOKEN",  # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –æ—Ç BotFather
#         currency="SOM",  # –í–∞–ª—é—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB, USD, EUR)
#         prices=prices,
#         start_parameter="buy-product"
#     )
#     await callback_query.answer("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —á–∞—Ç.")
# @router.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
# async def successful_payment(message: types.Message):
#     product_id = int(message.successful_payment.invoice_payload.split("_")[1])
#     await message.answer(
#         f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É. "
#         f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
#     )



@router.callback_query(lambda c: c.data in ["tov", "oplata", "dhl", "imp"])
async def handle_question(callback_query: CallbackQuery):
    # –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    responses = {
        "tov": (
            "‚ú® *–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
            "–ù–∞—à–∏ –∫–∞—Ç–∞–Ω—ã –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–∑ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç–∞–ª–∏. "
            "–ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–æ–ø–æ—Ç–ª–∏–≤–æ–π —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ä—É–∂–∏–µ, "
            "–Ω–æ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞!"
        ),
        "oplata": (
            "üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã*\n\n"
            "–ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏, "
            "PayPal, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –¥—Ä—É–≥–∏–µ. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!"
        ),
        "dhl": (
            "üöö *–î–æ—Å—Ç–∞–≤–∫–∞*\n\n"
            "–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–∞—Ç–∞–Ω—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É! –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —Å–ª—É–∂–±—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ DHL, "
            "–æ–±–µ—Å–ø–µ—á–∞—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –≤–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤."
        ),
        "imp": (
            "üñåÔ∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã*\n\n"
            "–ú—ã –º–æ–∂–µ–º –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞—Ç–∞–Ω—É –ø–æ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º! –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–∏–∑–∞–π–Ω, –¥–ª–∏–Ω—É –∫–ª–∏–Ω–∫–∞, "
            "—É–∑–æ—Ä —Ä—É–∫–æ—è—Ç–∏ –∏ –¥–∞–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –≥—Ä–∞–≤–∏—Ä–æ–≤–∫—É. –û–±—Å—É–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å –Ω–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º!"
        )
    }
    response = responses.get(callback_query.data, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await callback_query.message.answer(response, parse_mode="Markdown")
    await callback_query.answer()

@router.callback_query(lambda callback: callback.data.startswith("reviews"))
async def handle_reviews(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "‚ú® –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ —Å Yamagata Shop ‚ú®\n\n"
        "–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –º–∏—Ä–∞ —è–ø–æ–Ω—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞! –ú—ã –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –±–ª–æ–≥–µ—Ä–∞–º–∏, –º–∞–≥–∞–∑–∏–Ω–∞–º–∏, –¥–∏–∑–∞–π–Ω–µ—Ä–∞–º–∏ –∏ –ª—é–±—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç –Ω–∞—à—É –ª—é–±–æ–≤—å –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º.\n\n"
        "üéØ –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∞–∫—Ü–∏–π –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n"
        "üì© –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞!\n\n"
        "–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º: @Creator_Beyond_X\n"
        "WhatsApp: +996 (554) 633-637"
    )



dp.include_router(router)

async def main():
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
